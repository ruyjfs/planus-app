import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import messaging from '@react-native-firebase/messaging';
import AsyncStorage from '@react-native-community/async-storage';
import axios from 'axios';
import {Platform} from 'react-native';

import Users from '~/services/firebase/Users';
import {HeaderTitle} from 'react-navigation-stack';

export default class PushNotificationService {
  tokenFcm = '';
  constructor(
    onRegister = token => console.log('onRegister? TOKEN = ', token),
    onNotification = notification => {
      // PushNotification.localNotification({
      //   // autoCancel: false,
      //   // bigText: 'My big text that will be shown when notification is expanded',
      //   // subText: 'This is a subText',
      //   // color: 'pink',
      //   // vibrate: true,
      //   // vibration: 300,
      //   title: notification.title,
      //   message: notification.body,
      //   // playSound: true,
      //   // soundName: 'default',
      //   // actions: '["Accept", "Reject"]',
      // });
      // console.log('CLICOU NA NOTIFICACAO', Platform.OS, notification);
      // notification.finish(PushNotificationIOS.FetchResult.NoData);
      // PushNotificationIOS.setApplicationIconBadgeNumber(0);
    },
  ) {
    this.configure(onRegister, onNotification);
  }

  configure(
    onRegister,
    onNotification,
    gcm = 'AAAAj46TkbM:APA91bH04pEabtEIadDRE8QOp7Btnn2QeIC5jaSNA_x8PlnjiddiSrbywCnjTDpOCPvazcfkn1WjKvckCQ3iTV0lHimtyO8vZPWZfsdeodvtx2p-e-J3dMSgrp0LRsmZyssNGf_jaQUb',
  ) {
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: onRegister, //this._onRegister.bind(this),

      // (required) Called when a remote or local notification is opened or received
      onNotification: onNotification, //this._onNotification,

      // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
      senderID: gcm,

      // IOS ONLY (optional): default: all - Permissions to register.
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },

      // Should the initial notification be popped automatically
      // default: true
      popInitialNotification: true,

      /**
       * (optional) default: true
       * - Specified if permissions (ios) and token (android and ios) will requested or not,
       * - if not, you must call PushNotificationsHandler.requestPermissions() later
       */
      requestPermissions: true,
    });
  }

  async getToken() {
    // let fcmToken = await AsyncStorage.getItem('fcmToken');
    // if (!fcmToken) {
    let fcmToken = await messaging().getToken();
    //   if (fcmToken) {
    //     // user has a device token
    //     await AsyncStorage.setItem('fcmToken', fcmToken);
    //   }
    // }
    return fcmToken;
  }

  localNotif() {
    this.lastId++;
    PushNotification.localNotification({
      /* Android Only Properties */
      id: '' + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
      subText: 'This is a subText', // (optional) default: none
      color: 'red', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: 'Local Notification', // (optional)
      message: 'My Notification Message', // (required)
      playSound: false, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
    });
  }

  localNotification(message: any) {
    return PushNotification.localNotification({
      ...{
        vibrate: true,
        // soundName: 'default',
        // playSound: true,
      },
      ...message,
    });
    // return PushNotification.localNotification({
    //   // autoCancel: false,
    //   // bigText: 'My big text that will be shown when notification is expanded',
    //   // subText: 'This is a subText',
    //   // color: 'pink',
    //   // vibrate: true,
    //   // vibration: 300,
    //   title: message.title,
    //   message: message.message,
    //   // playSound: true,
    //   // soundName: 'default',
    //   // actions: '["Accept", "Reject"]',
    // });
  }

  scheduleNotif() {
    this.lastId++;
    PushNotification.localNotificationSchedule({
      date: new Date(Date.now() + 30 * 1000), // in 30 secs

      /* Android Only Properties */
      id: '' + this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
      subText: 'This is a subText', // (optional) default: none
      color: 'blue', // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      tag: 'some_tag', // (optional) add tag to message
      group: 'group', // (optional) add group to message
      ongoing: false, // (optional) set whether this is an "ongoing" notification

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      category: null, // (optional) default: null
      userInfo: null, // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: 'Scheduled Notification', // (optional)
      message: 'My Notification Message', // (required)
      playSound: true, // (optional) default: true
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });
  }

  checkPermission(cbk) {
    return PushNotification.checkPermissions(cbk);
  }

  cancelNotif() {
    PushNotification.cancelLocalNotifications({id: '' + this.lastId});
  }

  cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }

  async sendToUser(userId: string, message: string, title = 'Religare') {
    const User = await Users.findById(userId);
    if (User.tokenFcm) {
      return this.send(User.tokenFcm, message, title);
    }

    console.log('User sem tokenFcm');
  }

  async send(tokenFcm: string, message: string, title = 'Religare') {
    console.log('INICIO PUSH');
    const result = await axios.post(
      'https://fcm.googleapis.com/fcm/send',
      {
        priority: 'high',
        to: tokenFcm,
        data: {
          title: title,
          body: message,
        },
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization:
            'key=AAAAj46TkbM:APA91bF_-GYmbPKr_xdOh8pFEJ_FnkMGC0_v8J31nHjmK3360iXaODzRMbdtgIxj5v6jbgE8UYK-522yRzCfRBJhmLRPPUC6jyAvlCEuRt8wJV-Xp86HhW-JguRHVvcYZ04uy0vGDAE3',
        },
      },
    );
    console.log('FIM PUSH');
    return result;
  }
}

export {PushNotificationIOS, PushNotification, messaging};
